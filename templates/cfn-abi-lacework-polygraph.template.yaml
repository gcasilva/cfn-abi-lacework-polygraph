AWSTemplateFormatVersion: 2010-09-09
Description: "AWS Built-in package with Lacework. Bundled AWS Control Tower, Amazon GuardDuty, AWS Security Hub and Lacework. (abp-1kirFQBF75MfEQ3RbMQHRb-1uUqxTu50BQyeDu1QxxGqM-ln8935st)"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Properties
        Parameters:
            - pSRASourceS3BucketName
            - pSRAStagingS3KeyPrefix
            - pSRAS3BucketRegion
            - pSRAAlarmEmail
            - pRepoURL
            - pRepoBranch
      - Label:
          default: "Lacework Configuration Properties"
        Parameters:
          - LaceworkURL
          - LaceworkAccessKeyID
          - LaceworkSecretKey
          - CapabilityType
          - ExistingAccounts
          - ExistingCloudTrail
          - KMSKeyIdentifierARN
          - LogAccountName
          - AuditAccountName
      - Label:
          default: "Organization Configuration (Optional)"
        Parameters:
          - LaceworkOrgSubAccountNames
      - Label:
          default: "Single Sub-Account Configuration (Optional)"
        Parameters:
          - LaceworkSubAccountName
      - Label:
          default: Security Hub Configuration Properties
        Parameters:
          - pConfigureSecurityHub
          - pDisableSecurityHub
          - pEnableSecurityBestPracticesStandard
          - pEnableCISStandard
          - pCISStandardVersion
          - pEnablePCIStandard
          - pRegionLinkingMode
      - Label:
          default: GuardDuty Configuration Properties
        Parameters:
          - pConfigureGuardDuty
          - pDisableGuardDuty
          - pAutoEnableS3Logs
          - pAutoEnableKubernetesAuditLogs
          - pAutoEnableMalwareProtection
          - pEnableRdsLoginEvents
          - pEnableEksRuntimeMonitoring
          - pEnableEksAddonManagement
          - pEnableLambdaNetworkLogs
          - pGuardDutyFindingPublishingFrequency
      - Label:
          default: General Lambda Function Properties
        Parameters:
          - pCreateLambdaLogGroup
          - pLambdaLogGroupRetention
          - pLambdaLogGroupKmsKey
          - pLambdaLogLevel
      - Label:
          default: EventBridge Rule Properties
        Parameters:
          - pComplianceFrequency
      - Label:

          default: Advanced Configuration Properties
        Parameters:
          - pControlTower
          - pGovernedRegions
          - pSecurityAccountId
          - pLogArchiveAccountId
          - pCreateAWSControlTowerExecutionRole
          - pAdminRoleName
          - pExecRoleName

          default: Landing Zone
        Parameters:
          - pCreateAWSControlTowerExecutionRole


    ParameterLabels:
      # General Properties
      pSRASourceS3BucketName:
        default: SRA Source S3 Location
      pSRAStagingS3KeyPrefix:
        default: SRA Source Key
      pSRAS3BucketRegion:
        default: SRA Bucket Region
      pSRAAlarmEmail:
        default: (Optional) SRA Alarm Email
      pRepoURL:
        default: URL of the AWS SRA Repository
      pRepoBranch:
        default: A tag version to use with in the SRA repository
      # Lacework Configuration Properties
      LaceworkURL:
        default: Your Lacework URL
      LaceworkOrgSubAccountNames:
        default: AWS Organizations to Lacework Sub-Account Names
      LaceworkSubAccountName:
        default: Lacework Sub-Account Name
      LaceworkAccessKeyID:
        default: Lacework Access Key ID
      LaceworkSecretKey:
        default: Lacework Secret Key
      CapabilityType:
        default: Capability Type
      ExistingAccounts:
        default: Monitor Existing Accounts
      ExistingCloudTrail:
        default: Existing AWS Control Tower CloudTrail Name
      LogAccountName:
        default: Log Account Name
      AuditAccountName:
        default: Audit Account Name
      KMSKeyIdentifierARN:
        default: KMS Key Identifier ARN for CloudTrail S3 Logs Decrypt
      # Security Hub Configuration Properties
      pConfigureSecurityHub:
        default: Enable Security Hub at Organization level
      pDisableSecurityHub:
        default: Disable Security Hub
      pEnableSecurityBestPracticesStandard:
        default: Enable AWS Foundational Security Best Practices Standard
      pEnableCISStandard:
        default: Enable CIS Standard
      pCISStandardVersion:
        default: CIS Standard Version
      pEnablePCIStandard:
        default: Enable PCI Standard
      pRegionLinkingMode:
        default: Region Linking Mode
      # GuardDuty Configuration Properties
      pConfigureGuardDuty:
        default: Enable GuardDuty at Organization level 
      pDisableGuardDuty:
        default: Disable GuardDuty in all accounts and regions before deleting the stack
      pAutoEnableS3Logs:
        default: Auto Enable S3 Logs
      pAutoEnableKubernetesAuditLogs:
        default: Auto Enable kubernetes Logs
      pAutoEnableMalwareProtection:
        default: Auto Enable malware protection
      pEnableRdsLoginEvents:
        default: Auto Enable RDS Login Events
      pEnableEksRuntimeMonitoring:
        default: Auto Enable EKS Runtime Monitoring
      pEnableEksAddonManagement:
        default: Auto enable EKS Add-on Management
      pEnableLambdaNetworkLogs:
        default: Auto enable Lambda Network Logs
      pGuardDutyFindingPublishingFrequency:
        default: Finding publishing frequency
      # General Lambda Function Properties
      pCreateLambdaLogGroup:
        default: Create Lambda Log Group
      pLambdaLogGroupRetention:
        default: Lambda Log Group Retention
      pLambdaLogGroupKmsKey:
        default: (Optional) Lambda Logs KMS Key
      pLambdaLogLevel:
        default: Lambda Log Level
      # EventBridge Rule Properties
      pComplianceFrequency:
        default: Frequency to Check for Organizational Compliance

      # Advanced Configuration Properties
      pControlTower:
        default: pControlTower
      pGovernedRegions:
        default: pGovernedRegions
      pSecurityAccountId:
        default: pSecurityAccountId
      pLogArchiveAccountId:
        default: pLogArchiveAccountId

      # Landing Zone
      pCreateAWSControlTowerExecutionRole:
        default: AWS Control Tower Execution Role creation parameter

Parameters:
  # General Properties
  pSRASourceS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Type: String
    Default: aws-abi
  pSRAStagingS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Type: String
    Default: cfn-abi-lacework-polygraph
  pSRAS3BucketRegion:
    AllowedPattern: ^[a-z][a-z]-[a-z]*-[0-9]*$
    Type: String
    Default: us-east-1
  pSRAAlarmEmail:
    AllowedPattern: '^$|^([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)$'
    ConstraintDescription: Must be a valid email address.
    Default: ''
    Description: (Optional) Email address for receiving SRA alarms
    Type: String
  pRepoURL:
    Default: "https://github.com/aws-samples/aws-security-reference-architecture-examples.git"
    Description: AWS Security Reference Architecture examples repository URL
    Type: String
  pRepoBranch:
    Default: "tags/v3.0.4"
    Description: SRA version to tag
    Type: String
  # lacework parameters
  LaceworkURL:
    Type: String
    Description: "Enter your Lacework URL. ie. account.lacework.net."
    MinLength: '1'
    AllowedPattern: '(.+?)\.lacework\.net'
    ConstraintDescription: "Invalid Lacework URL."
  LaceworkOrgSubAccountNames:
    Type: String
    Description: "Use for AWS organizations to Lacework sub-accounts mapping. Provide a commas-separated list. Leave blank otherwise. If used, ensure that the Lacework credentials are for the Organization Admin."
    AllowedPattern: '^$|^[a-zA-Z0-9.,]+(?:-[a-zA-Z0-9.,]+)*$'
    ConstraintDescription: "Invalid list entered. The sub-account name may contain alphanumeric characters and dashes only."
    Default: ''
  LaceworkSubAccountName:
    Type: String
    Description: "Use for a single sub-account use only. Leave blank otherwise. If used, ensure that the Lacework credentials are for the Sub-Account."
    AllowedPattern: '^$|^[a-zA-Z0-9.]+(?:-[a-zA-Z0-9.]+)*$'
    ConstraintDescription: "Invalid Lacework account name entered. The account name may contain alphanumeric characters and dashes only."
    Default: ''
  LaceworkAccessKeyID:
    Type: String
    MinLength: '1'
    AllowedPattern: '^[-a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Access Key ID contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key ID. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  LaceworkSecretKey:
    Type: String
    NoEcho: true
    MinLength: '1'
    AllowedPattern: '^[a-zA-Z0-9_]*$'
    ConstraintDescription: "The Lacework API Secret Key contains alphanumeric characters and symbols only."
    Description: "Enter the Lacework API Secret Key. See https://support.lacework.com/hc/en-us/articles/360011403853-Generate-API-Access-Keys-and-Tokens."
  CapabilityType:
    AllowedValues:
      - 'CloudTrail+Config'
      - 'Config'
    Type: String
    Default: CloudTrail+Config
    Description: "Enter the Lacework Control Tower StackSet type to use."
  ExistingAccounts:
    Description: "Choose to monitor any existing accounts. SUSPENDED accounts are skipped."
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
  ExistingCloudTrail:
    Type: String
    MinLength: '1'
    AllowedPattern: '^[-a-zA-Z0-9_]*$'
    ConstraintDescription: "Invalid CloudTrail name."
    Description: "Enter your existing AWS CloudTrail trail name if not using AWS Control Tower."
    Default: 'aws-controltower-BaselineCloudTrail'
  LogAccountName:
    Type: String
    Description: "Enter your AWS Control Tower log account name."
    MinLength: '1'
    AllowedPattern: '^[-a-zA-Z0-9\s]*$'
    ConstraintDescription: "The account name contains alphanumeric characters only."
    Default: "Log Archive"
  AuditAccountName:
    Type: String
    Description: "Enter your AWS Control Tower audit account name."
    MinLength: '1'
    AllowedPattern: '^[-a-zA-Z0-9\s]*$'
    ConstraintDescription: "The account name contains alphanumeric characters only."
    Default: "Audit"
  KMSKeyIdentifierARN:
    Description: "Provide the ARN of the KMS key for decrypting S3 log files decryption if necessary. Ensure that the Lacework account or role has kms:decrypt access within the Key Policy. Won't use KMS decrypt if no key provided."
    Default: ''
    Type: String
    MaxLength: '256'
  # SecurityHub Configuration Properties
  pConfigureSecurityHub:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description: Enable Security Hub at Organization level.
    Type: String
  pDisableSecurityHub:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description: Update to 'Yes' to disable Security Hub in all accounts and regions before deleting the stack.
    Type: String
  pEnableSecurityBestPracticesStandard:
    AllowedValues: [ 'true', 'false' ]
    Default: 'true'
    Description: Indicates whether to enable the AWS Foundational Security Best Practices Standard.
    Type: String
  pEnableCISStandard:
    AllowedValues: [ 'true', 'false' ]
    Default: 'false'
    Description: Indicates whether to enable the CIS AWS Foundations Benchmark Standard.
    Type: String
  pCISStandardVersion:
    AllowedValues: [ 1.2.0, 1.4.0 ]
    Default: 1.4.0
    Description: CIS Standard Version
    Type: String
  pEnablePCIStandard:
    AllowedValues: [ 'true', 'false' ]
    Default: 'false'
    Description: Indicates whether to enable the Payment Card Industry Data Security Standard (PCI DSS).
    Type: String
  pRegionLinkingMode:
    AllowedValues: [ SPECIFIED_REGIONS, ALL_REGIONS ]
    Default: SPECIFIED_REGIONS
    Description:
      Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically
      aggregate findings from new Regions as Security Hub supports them and you opt into them.
    Type: String
  # GuardDuty Configuration Properties
  pConfigureGuardDuty:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description: Enable GuardDuty at Organization level.
    Type: String
  pDisableGuardDuty:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description: Disable the GuardDuty solution in all accounts and regions before deleting the stack.
    Type: String
  pAutoEnableS3Logs:
    AllowedValues: [ 'true', 'false' ]
    Default: 'true'
    Description: Auto enable S3 logs
    Type: String
  pAutoEnableKubernetesAuditLogs:
    AllowedValues: [ 'true', 'false' ]
    Default: 'false'
    Description: Auto Enable kubernetes Logs
    Type: String
  pAutoEnableMalwareProtection:
    AllowedValues: [ 'true', 'false' ]
    Default: 'false'
    Description: Auto Enable malware protection
    Type: String
  pEnableRdsLoginEvents:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable RDS Login Events
    Type: String
  pEnableEksRuntimeMonitoring:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable EKS Runtime Monitoring
    Type: String   
  pEnableEksAddonManagement:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable EKS Add-on Management
    Type: String
  pEnableLambdaNetworkLogs:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Auto enable Lambda Network Logs
    Type: String
  pGuardDutyFindingPublishingFrequency:
    AllowedValues: [FIFTEEN_MINUTES, ONE_HOUR, SIX_HOURS]
    Default: FIFTEEN_MINUTES
    Description: Finding publishing frequency
    Type: String 
  # General Lambda Function Properties
  pCreateLambdaLogGroup:
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description:
      Indicates whether a CloudWatch Log Group should be explicitly created for the Lambda function, to allow for setting a Log Retention and/or KMS
      Key for encryption.
    Type: String
  pLambdaLogGroupRetention:
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653 ]
    Default: 14
    Description: Specifies the number of days you want to retain log events
    Type: String
  pLambdaLogGroupKmsKey:
    AllowedPattern: '^$|^arn:(aws[a-zA-Z-]*){1}:kms:[a-z0-9-]+:\d{12}:key\/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$'
    ConstraintDescription: 'Key ARN example:  arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab'
    Default: ''
    Description:
      (Optional) KMS Key ARN to use for encrypting the Lambda logs data. If empty, encryption is enabled with CloudWatch Logs managing the server-side
      encryption keys.
    Type: String
  pLambdaLogLevel:
    AllowedValues: [ INFO, ERROR, DEBUG ]
    Default: INFO
    Description: Lambda Function Logging Level
    Type: String
  # EventBridge Rule Properties
  pComplianceFrequency:
    ConstraintDescription: Compliance Frequency must be a number between 1 and 30, inclusive.
    Default: 7
    Description: Frequency (in days between 1 and 30, default is 7) to check organizational compliance by invoking the Lambda Function.
    MinValue: 1
    MaxValue: 30
    Type: Number

  # Advanced Configuration Properties
  pControlTower:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description:
      Indicates whether AWS Control Tower is deployed and being used for this AWS environment.
    Type: String
  pSecurityAccountId:
    AllowedPattern: '^\d{12}$'
    Default: 111111111111
    ConstraintDescription: Must be 12 digits.
    Description: AWS Account ID of the Security Tooling account (ignored for AWS Control Tower environments).
    Type: String
  pLogArchiveAccountId:
    AllowedPattern: '^\d{12}$'
    Default: 222222222222
    ConstraintDescription: Must be 12 digits.
    Description: AWS Account ID of the Log Archive account (ignored for AWS Control Tower environments).
    Type: String
  pGovernedRegions:
    AllowedPattern: '^(ct-regions)|((\b(?<!@)(af-south-1|ap-east-1|ap-northeast-1|ap-northeast-2|ap-northeast-3|ap-south-1|ap-south-2|ap-southeast-1|ap-southeast-2|ap-southeast-3|ap-southeast-4|ca-central-1|cn-north-1|cn-northwest-1|eu-central-1|eu-central-2|eu-north-1|eu-south-1|eu-south-2|eu-west-1|eu-west-2|eu-west-3|me-central-1|me-south-1|sa-east-1|us-east-1|us-east-2|us-gov-east-1|us-gov-west-1|us-west-1|us-west-2)\b,{0,1})*)$'
    ConstraintDescription:
      For AWS Control Tower, set to ct-regions (default).  If not using AWS Control Tower, specify comma separated list of regions (e.g. us-west-2,us-east-1,ap-south-1) in lower case.
    Default: ct-regions
    Description: AWS regions (comma separated) if not using AWS Control Tower (leave set to ct-regions for AWS Control Tower environments)
    Type: String
  pCreateAWSControlTowerExecutionRole:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Indicates whether the AWSControlTowerExecution role should be created in the management account. (Only when AWS Control Tower landing zone is deployed. The 'pControlTower' must be set to 'true')
    Type: String
  pAdminRoleName:
    Default: 'AWSCloudFormationStackSetAdministrationRole'
    Description: IAM role in the Management account, used to deploy stacks in other account/regions. Needed only when 'pControlTower' is set to 'false'
    Type: String
  pExecRoleName:
    Default: 'AWSCloudFormationStackSetExecutionRole'
    Description: IAM role in the AWS accounts, which allows trusted access to 'pAdminRoleName'. Needed only when 'pControlTower' is set to 'false'
    Type: String
  
Conditions:
  cControlTowerEnabled: !Equals [!Ref pControlTower, 'true']

  # Landing Zone
  pCreateAWSControlTowerExecutionRole:
    AllowedValues: ['true', 'false']
    Default: 'true'
    Description: Indicates whether the AWS Control Tower Execution role should be created in the Management Account.
    Type: String

Conditions:
  cEnableGuardDuty: !Equals [!Ref pConfigureGuardDuty, 'Yes']
  cEnableSecurityHub: !Equals [!Ref pConfigureSecurityHub, 'Yes']


Resources:
  rOrgIdGdLambdaCustomResource:
    Type: Custom::LambdaCustomResource
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt rOrgIdGdLambdaFunction.Arn

  rOrgIdGdLambdaFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Lambda role provides access to CloudWatch Logs
          - id: W89
            reason: Lambda does not need to communicate with VPC resources.
          - id: W92
            reason: Lambda does not need reserved concurrent executions.
      checkov:
        skip:
          - id: CKV_AWS_115
            comment: Lambda does not need reserved concurrent executions.
          - id: CKV_AWS_116
            comment: DLQ not needed, as Lambda function only triggered by CloudFormation events.
          - id: CKV_AWS_117
            comment: Lambda does not need to communicate with VPC resources.
          - id: CKV_AWS_173
            comment: Environment variables are not sensitive.
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: get-organization-id
      Description: Get AWS Organization ID
      Handler: index.lambda_handler
      Role: !GetAtt rOrgIdGdLambdaRole.Arn
      Runtime: python3.11
      Timeout: 60
      Code:
        ZipFile: |
          # type: ignore
          """Custom Resource to get AWS Organization ID.

          Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          SPDX-License-Identifier: MIT-0
          """
          import logging
          import os

          import boto3
          import cfnresponse

          LOGGER = logging.getLogger(__name__)
          log_level: str = os.environ.get("LOG_LEVEL", "ERROR")
          LOGGER.setLevel(log_level)


          def get_org_id():
              """Get AWS Organization ID.

              Returns:
                  Response data for custom resource
              """
              management_account_session = boto3.Session()
              org_client = management_account_session.client("organizations")
              response = org_client.describe_organization()["Organization"]
              LOGGER.debug({"API_Call": "organizations:DescribeOrganization", "API_Response": response})
              return {"OrganizationId": response["Id"]}


          def lambda_handler(event, context):
              """Lambda Handler.

              Args:
                  event: event data
                  context: runtime information
              """
              try:
                  data = get_org_id()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, data, data["OrganizationId"])
              except Exception:
                  LOGGER.exception("Unexpected!")
                  reason = f"See the details in CloudWatch Log Stream: '{context.log_group_name}'"
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, data["OrganizationId"], reason=reason)

  rOrgIdGdLambdaLogGroup:
    DeletionPolicy: Retain
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 400

  rOrgIdGdLambdaRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Allow * in resource when required
          - id: W28
            reason: The role name is defined to identify automation resources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: org-id
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: OrganizationRead
                Effect: Allow
                Action: organizations:DescribeOrganization
                Resource: '*'
        - PolicyName: CloudWatchLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/get-organization-id:log-stream:*

  rStagingS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: S3 access logs intentionally not enabled
      checkov:
        skip:
          - id: CKV_AWS_18
            comment: S3 access logs intentionally not enabled
    Properties:
      BucketName: !Sub ${pSRAStagingS3KeyPrefix}-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

  rStagingS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F16
            reason: GetObject is restricted to AWS accounts within the AWS Organization
    Properties:
      Bucket: !Ref rStagingS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowDeploymentRoleGetObject
            Effect: Allow
            Action: s3:GetObject
            Principal: '*'
            Resource: !Sub arn:${AWS::Partition}:s3:::${rStagingS3Bucket}/*
            Condition:
              ArnLike:
                aws:PrincipalArn:
                  - !Sub arn:${AWS::Partition}:iam::*:role/stacksets-exec-*

          - Sid: DenyExternalPrincipals
            Effect: Deny
            Action: 's3:*'
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rStagingS3Bucket}
              - !Sub arn:${AWS::Partition}:s3:::${rStagingS3Bucket}/*
            Condition:
              StringNotEquals:
                aws:PrincipalOrgID: !GetAtt rOrgIdGdLambdaCustomResource.OrganizationId

          - Sid: SecureTransport
            Effect: Deny
            Action: 's3:*'
            Principal: '*'
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rStagingS3Bucket}
              - !Sub arn:${AWS::Partition}:s3:::${rStagingS3Bucket}/*
            Condition:
              Bool:
                aws:SecureTransport: False

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'rStagingS3Bucket'
      SourceBucket: !Ref 'pSRASourceS3BucketName'
      Prefix: !Sub '${pSRAStagingS3KeyPrefix}/'
      Objects:
        - submodules/lacework-control-tower-cfn/lambda_functions/packages/setup/LaceworkCTSetup3.3.0.zip
        - submodules/lacework-control-tower-cfn/lambda_functions/packages/account/LaceworkCTAccount3.2.0.zip
        - submodules/lacework-control-tower-cfn/lambda_functions/packages/auth/LaceworkCTAuth3.2.0.zip
        - submodules/lacework-control-tower-cfn/templates/cfn-abi-control-tower-integration.template.yaml
        - submodules/lacework-control-tower-cfn/templates/control-tower-integration.template.yaml
        - submodules/lacework-control-tower-cfn/templates/lacework-aws-cfg-member.template.yaml
        - submodules/lacework-control-tower-cfn/templates/lacework-aws-ct-audit.template.yaml
        - submodules/lacework-control-tower-cfn/templates/lacework-aws-ct-log.template.yaml

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${pSRASourceS3BucketName}/'
                  - !Sub 'arn:${AWS::Partition}:s3:::${pSRASourceS3BucketName}/${pSRAStagingS3KeyPrefix}/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${rStagingS3Bucket}/'
                  - !Sub 'arn:${AWS::Partition}:s3:::${rStagingS3Bucket}/${pSRAStagingS3KeyPrefix}/*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    # checkov:skip=CKV_AWS_117:Ensure that AWS Lambda function is configured inside a VPC
    # checkov:skip=CKV_AWS_115:Ensure that AWS Lambda function is configured for function-level concurrent execution limit
    # checkov:skip=CKV_AWS_116:Ensure that AWS Lambda function is configured for a Dead Letter Queue(DLQ)
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.11
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse

          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print(('copy_source: %s' % copy_source))
                  print(('dest_bucket = %s'%dest_bucket))
                  print(('key = %s' %key))
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)

          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)

          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)

          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print(('Received event: %s' % json.dumps(event)))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  LaceworkControlTowerCfn:
    Type: AWS::CloudFormation::Stack
    DependsOn: 
      - CopyZips
      - CfnAbiAwsSecurityHub
    Properties:
      TemplateURL: !Sub "https://${pSRASourceS3BucketName}.s3.${pSRAS3BucketRegion}.${AWS::URLSuffix}/${pSRAStagingS3KeyPrefix}/submodules/lacework-control-tower-cfn/templates/cfn-abi-control-tower-integration.template.yaml"
      Parameters:
        S3BucketName: !Ref rStagingS3Bucket
        S3KeyPrefix: !Ref pSRAStagingS3KeyPrefix
        LaceworkURL: !Ref LaceworkURL
        LaceworkOrgSubAccountNames: !Ref LaceworkOrgSubAccountNames
        LaceworkSubAccountName: !Ref LaceworkSubAccountName
        LaceworkAccessKeyID: !Ref LaceworkAccessKeyID
        LaceworkSecretKey: !Ref LaceworkSecretKey
        CapabilityType: !Ref CapabilityType
        ExistingAccounts: !Ref ExistingAccounts
        ExistingCloudTrail: !Ref ExistingCloudTrail
        LogAccountName: !Ref LogAccountName
        AuditAccountName: !Ref AuditAccountName
        KMSKeyIdentifierARN: !Ref KMSKeyIdentifierARN
        AdministrationRoleARN: 
          !If
            - cControlTowerEnabled
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${pAdminRoleName} 
        ExecutionRoleName: 
          !If
            - cControlTowerEnabled
            - AWSControlTowerExecution
            - !Ref pExecRoleName

  CfnAbiAwsSecurityHub:
    Type: AWS::CloudFormation::Stack
    Condition: cEnableSecurityHub
    Metadata:
      StackName: !Ref 'AWS::StackName'
    Properties:
      TemplateURL: !Sub "https://${pSRASourceS3BucketName}.s3.${pSRAS3BucketRegion}.${AWS::URLSuffix}/${pSRAStagingS3KeyPrefix}/submodules/aws-security-reference-architecture-examples/aws_sra_examples/modules/securityhub-org-module/templates/sra-securityhub-org-module-main.yaml"
      Parameters:
        pRepoURL: !Ref pRepoURL
        pRepoBranch: !Ref pRepoBranch
        pCISStandardVersion: !Ref pCISStandardVersion
        pComplianceFrequency: !Ref pComplianceFrequency
        pCreateLambdaLogGroup: !Ref pCreateLambdaLogGroup
        pDisableSecurityHub: !Ref pDisableSecurityHub
        pEnableCISStandard: !Ref pEnableCISStandard
        pEnablePCIStandard: !Ref pEnablePCIStandard
        pEnableSecurityBestPracticesStandard: !Ref pEnableSecurityBestPracticesStandard
        pLambdaLogGroupKmsKey: !Ref pLambdaLogGroupKmsKey
        pLambdaLogGroupRetention: !Ref pLambdaLogGroupRetention
        pLambdaLogLevel: !Ref pLambdaLogLevel
        pRegionLinkingMode: !Ref pRegionLinkingMode
        pSRAAlarmEmail: !Ref pSRAAlarmEmail
        pCreateAWSControlTowerExecutionRole: !Ref pCreateAWSControlTowerExecutionRole

        pControlTower: !Ref pControlTower
        pGovernedRegions: !Ref pGovernedRegions
        pSecurityAccountId: !Ref pSecurityAccountId
        pLogArchiveAccountId: !Ref pLogArchiveAccountId


      Tags:
        - Key: sra-solution
          Value: !Ref pSRAStagingS3KeyPrefix
  CfnAbiAmazonGuardDuty:
    Type: AWS::CloudFormation::Stack
    Condition: cEnableGuardDuty
    Metadata:
      DependsOnSecurityHub: !If
        - cEnableSecurityHub
        - !Ref CfnAbiAwsSecurityHub
        - !Ref 'AWS::NoValue'
    Properties:
      TemplateURL: !Sub "https://${pSRASourceS3BucketName}.s3.${pSRAS3BucketRegion}.${AWS::URLSuffix}/${pSRAStagingS3KeyPrefix}/submodules/aws-security-reference-architecture-examples/aws_sra_examples/modules/guardduty-org-module/templates/sra-guardduty-org-module-main.yaml"
      Parameters:
        pRepoURL: !Ref pRepoURL
        pRepoBranch: !Ref pRepoBranch
        pDisableGuardDuty: !Ref pDisableGuardDuty
        pAutoEnableS3Logs: !Ref pAutoEnableS3Logs
        pAutoEnableKubernetesAuditLogs: !Ref pAutoEnableKubernetesAuditLogs
        pAutoEnableMalwareProtection: !Ref pAutoEnableMalwareProtection
        pEnableRdsLoginEvents: !Ref pEnableRdsLoginEvents
        pEnableEksRuntimeMonitoring: !Ref pEnableEksRuntimeMonitoring
        pEnableEksAddonManagement: !Ref pEnableEksAddonManagement
        pEnableLambdaNetworkLogs: !Ref pEnableLambdaNetworkLogs
        pGuardDutyFindingPublishingFrequency: !Ref pGuardDutyFindingPublishingFrequency
        pSRAAlarmEmail: !Ref pSRAAlarmEmail

        pControlTower: !Ref pControlTower
        pGovernedRegions: !Ref pGovernedRegions
        pSecurityAccountId: !Ref pSecurityAccountId
        pLogArchiveAccountId: !Ref pLogArchiveAccountId

        pCreateAWSControlTowerExecutionRole: !Ref pCreateAWSControlTowerExecutionRole

      Tags:
        - Key: sra-solution
          Value: !Ref pSRAStagingS3KeyPrefix
  LaceworkSecurityHubCfn:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - LaceworkControlTowerCfn
    Properties:
      TemplateURL: !Sub "https://${pSRASourceS3BucketName}.s3.${pSRAS3BucketRegion}.${AWS::URLSuffix}/${pSRAStagingS3KeyPrefix}/templates/cfn-abi-lacework-sec-hub-ingest.template.yaml"
      Parameters:
        LaceworkAccount: !Select [ 0, !Split [ '.', !Ref LaceworkURL ] ]
        ExternalID: !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ]
        ApiToken: "{{resolve:secretsmanager:LaceworkApiCredentials:SecretString:AccessToken}}"